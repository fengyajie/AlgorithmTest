
HashMap采用key/value存储结构，每个key对应唯一的value，查询和修改的速度都很快，能达到O(1)的平均时间复杂度。它是非线程安全的，且不保证元素存储的顺序
HashMap的实现采用了（数组 + 链表 + 红黑树）的复杂结构，数组的一个元素又称作桶。
数组和链表是属于物理结构，其他为逻辑结构
在添加元素时，会根据hash值算出元素在数组中的位置，如果该位置没有元素，则直接把元素放置在此处，如果该位置有元素了，则把元素以链表的形式放置在链表的尾部。

当一个链表的元素个数达到一定的数量（且数组的长度达到一定的长度）后，则把链表转化为红黑树，从而提高效率。

数组的查询效率为O(1)，链表的查询效率是O(n)，红黑树的查询效率是O(log n)，k为桶中的元素个数，所以当元素数量非常多的时候，转化为红黑树能极大地提高效率。


树的定义:
   树是n(n>=0)个节点的有限集。当n=0时，称为空树；在任意一个非空树中，有如下特点：
   1：有且仅有一个称为根的节点；
   2：当n>1时，其余节点可分为m(m>0)个互不相交的有限集，每个集合又是一个树，并称为根的子树；


